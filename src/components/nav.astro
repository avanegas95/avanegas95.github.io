---
interface NavItem {
  label: string;
  href: string;
  number: string;
}

const navItems: NavItem[] = [
  {
    number: "01.",
    label: "About",
    href: "#home",
  },
  {
    number: "02.",
    label: "Work",
    href: "#projects",
  },
  {
    number: "03.",
    label: "Contact",
    href: "#contact",
  },
];
---

<div class="sticky top-0 max-w-8xl mx-auto backdrop-blur">
  <nav class="flex items-center justify-between py-4">
    <a href="#" class="text-[var(--sec)] font-bold text-2xl">AV</a>
   
      <ul class="flex space-x-8">
        {
          navItems.map((item) => (
            <li>
              <a
                href={item.href}
                class="group flex items-center text-sm text-[var(--white-icon)] hover:text-[var(--sec)] transition-colors duration-300"
              >
                <span class="text-[var(--sec)] mr-1">{item.number}</span>
                {item.label}
              </a>
            </li>
          ))
        }
      </ul>
    <button
      id="mobile-menu-button"
      class="md:hidden text-[var(--white-icon)] hover:text-[var(--sec)] transition-colors duration-300"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>
  </nav>
  
  <!-- Mobile menu -->
  <div id="mobile-menu" class="hidden md:hidden">
    <ul class="py-4 space-y-4">
      {
        navItems.map((item) => (
          <li>
            <a
              href={item.href}
              class="block text-sm text-[var(--white-icon)] hover:text-[var(--sec)] transition-colors duration-300"
            >
              <span class="text-[var(--sec)] mr-1">{item.number}</span>
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = e.currentTarget as HTMLAnchorElement;
      const targetId = target.getAttribute("href")?.substring(1) || "";
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: "smooth",
        });
        mobileMenu?.classList.add('hidden');
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section[id]");
    const navLinks = document.querySelectorAll("nav a[href^='#']");
    const observerOptions = { threshold: 0.6 };

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => link.classList.remove("active"));
          const id = entry.target.getAttribute("id");
          const activeLink = document.querySelector(`nav a[href="#${id}"]`);
          if (activeLink) {
            activeLink.classList.add("active");
          }
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);
    sections.forEach((section) => observer.observe(section));
  });
</script>

<style>
  nav a.active {
    color: var(--sec) !important;
  }
</style>

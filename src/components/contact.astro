<section id="contact" class="w-full py-8 md:py-12 border-t border-[#ffffff10] relative overflow-hidden">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="space-y-8 md:space-y-12">
      <div class="space-y-4">
        <h2 class="text-base md:text-lg text-[var(--sec)] mb-2 shiny-sec fade-in">Let's talk</h2>
        <h3 class="text-3xl sm:text-4xl md:text-5xl font-medium text-[var(--white)] mb-4 md:mb-6 fade-in">
          Contact
        </h3>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8">
        <div class="text-[var(--white-icon)] text-sm md:text-base space-y-4 fade-in">
          <p>
            Have any questions or want to know more about me? Feel free to reach out.
          </p>
          <div class="flex items-center gap-2">
            <span>Location:</span>
            <span class="text-[var(--white)]">Boston, MA</span>
          </div>
        </div>

        <div class="fade-in">
          <form
            id="contact-form"
            action="https://formspree.io/f/mnnpzgay"
            method="POST"
            class="flex flex-col gap-3 md:gap-4"
          >
            <div class="relative">
              <input
                type="text"
                name="from_name"
                placeholder="Name"
                required
                class="w-full px-3 md:px-4 py-2 bg-[#1414149c] text-[var(--white)] text-sm md:text-base border border-[var(--white-icon-tr)] rounded-lg focus:outline-none focus:ring-2 focus:ring-[var(--sec)] transition-all duration-300"
              />
              <div class="absolute inset-0 rounded-lg pointer-events-none transition-all duration-300 focus-within:ring-2 focus-within:ring-[var(--sec)]"></div>
            </div>

            <div class="relative">
              <input
                type="email"
                name="reply_to"
                placeholder="Email"
                required
                class="w-full px-3 md:px-4 py-2 bg-[#1414149c] text-[var(--white)] text-sm md:text-base border border-[var(--white-icon-tr)] rounded-lg focus:outline-none focus:ring-2 focus:ring-[var(--sec)] transition-all duration-300"
              />
              <div class="absolute inset-0 rounded-lg pointer-events-none transition-all duration-300 focus-within:ring-2 focus-within:ring-[var(--sec)]"></div>
            </div>

            <div class="relative">
              <textarea
                name="message"
                placeholder="Message"
                rows="6"
                required
                class="w-full px-3 md:px-4 py-2 bg-[#1414149c] text-[var(--white)] text-sm md:text-base border border-[var(--white-icon-tr)] rounded-lg focus:outline-none focus:ring-2 focus:ring-[var(--sec)] resize-none transition-all duration-300"
              ></textarea>
              <div class="absolute inset-0 rounded-lg pointer-events-none transition-all duration-300 focus-within:ring-2 focus-within:ring-[var(--sec)]"></div>
            </div>

            <button
              type="submit"
              class="px-4 py-2 bg-[var(--white-icon-tr)] text-[var(--white)] text-sm md:text-base rounded-lg opacity-60 transition-all duration-300 border border-[var(--white-icon-tr)] hover:opacity-100 hover:bg-[var(--white-icon-tr)] hover:scale-105"
            >
              Submit
            </button>
          </form>

          <div
            id="form-message"
            class="hidden justify-center items-center mt-4 text-[var(--white)] text-base md:text-lg fade-in"
          >
            âœ… Thank you for your message!
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script type="module" is:inline>
  const form = document.getElementById("contact-form");
  const formMessage = document.getElementById("form-message");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const submitButton = form.querySelector('button[type="submit"]');
    
    try {
      submitButton.disabled = true;
      submitButton.textContent = "Sending...";
      
      const response = await fetch(form.action, {
        method: "POST",
        body: formData,
        headers: { Accept: "application/json" },
      });

      if (response.ok) {
        form.reset();
        form.style.display = "none";
        formMessage.classList.remove("hidden");
      } else {
        const data = await response.json();
        console.error("Error response:", data);
        alert("There was a problem sending your message.");
      }
    } catch (error) {
      console.error("Error:", error);
      alert("There was a problem sending your message.");
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = "Submit";
    }
  });
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Improve form focus states for better accessibility */
  input:focus-visible,
  textarea:focus-visible {
    outline: none;
    border-color: var(--sec);
    box-shadow: 0 0 0 2px rgba(var(--sec), 0.2);
  }

  /* Add focus styles for keyboard navigation */
  @media (pointer: coarse) {
    input:focus,
    textarea:focus {
      outline: none;
      border-color: var(--sec);
      box-shadow: 0 0 0 2px rgba(var(--sec), 0.2);
    }
  }
</style>

<style>
    .fade-in {
        opacity: 0;
        transform: translateY(10px);
        transition: opacity 0.5s ease-out, transform 0.5s ease-out;
    }

    .fade-in.visible {
        opacity: 1;
        transform: translateY(0);
    }
</style>

<script>
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, {
        threshold: 0.05,
        rootMargin: '100px'
    });

    document.addEventListener('DOMContentLoaded', () => {
        const fadeElements = document.querySelectorAll('.fade-in');
        fadeElements.forEach((element, index) => {
            element.style.transitionDelay = `${index * 0.05}s`;
            observer.observe(element);
        });
    });
</script>

